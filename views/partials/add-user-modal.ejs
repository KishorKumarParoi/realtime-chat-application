<div class="modal-wrapper" id="add-user-modal">
    <div class="modal">
      <a href="#" onclick="closeModal()" class="modal-close">+</a>
      <div class="modal-title">
        <h2>Create New User</h2>
      </div>
      <div class="modal-body">

        <form action="/users" method="post" enctype="multipart/form-data" id="add-user-form">
        
          <input type="text" placeholder="enter name" name="name" />
          <p class="error name-error"></p>

          <input type="text" placeholder="enter email" name="email" />
          <p class="error email-error"></p>


          <input type="text" placeholder="enter mobile" name="mobile" />
          <p class="error mobile-error"></p>


          <input type="password" placeholder="enter password" name="password" />
          <p class="error password-error"></p>
          
          <input type="file" name="avatar" />
          <p class="error avatar-error"></p>

          <p class="error common-error"></p>
          
          <input type="submit" value="Submit" />

        </form>
      </div>
    </div>
  </div>
  <script>
    const modal = document.querySelector("#add-user-modal");
    const form = document.querySelector("#add-user-form");

    // success part
    const successToast = Toastify({
        text : "User was added succesfully, loading the list....",
        duration : 1000,
    })

    function closeModal() {
      modal.style.display = "none";
    }
    function openModal() {
      modal.style.display = "block";
    }

    // form submit handler
    form.onsubmit =  async function(event){
        event.preventDefault();

        // clear all error messages first
        const errorPlaceholders = document.querySelectorAll("p.error");
        for(let i = 0; i < errorPlaceholders.length; ++i){
          errorPlaceholder[i].style.display = "none";
        }

        const inputBoxes = document.querySelectorAll("input.error");
        if(inputBoxes.length > 0){
          for(let i = 0; i < inputBoxes.length; ++i){
            inputBoxes[i].classList.remove("error");
          }
        }

        // prepare the form data
        const formData = new FormData(form);

        // send the form data to the server
        let response = await fetch("/users", {
            method: "POST",
            body: formData
        });

        // get the response from the server
        const result =  await response.json();

        // handle error and response
        if(result.errors){
                // show error messages
            Object.keys(result.errors).forEach((fieldName) => {
                // make error visible to ui
                form[fieldName].classList.add("error"); 

                // set all error placeholders (p tags) textContent 
                const errorPlaceholder = document.querySelector(`.${fieldName}-error`);
                errorPlaceholder.textContent = result.errors[fieldName].msg;

                // make all placeholder visible
                errorPlaceholder.style.display = "block";
            })
        }else{
            // success
            successToast.showToast();
            closeModal();
            document.querySelector("p.error").style.display = "none";

            // reload the page after 1 sec
            setTimeout(() => {
                location.reload();
            }, 1000);
        }
    };
  </script>